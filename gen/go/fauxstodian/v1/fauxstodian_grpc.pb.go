// Copyright 2024 Figure Technologies.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: fauxstodian/v1/fauxstodian.proto

package fauxstodianv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FauxstodianService_CreateAccount_FullMethodName     = "/fauxstodian.v1.FauxstodianService/CreateAccount"
	FauxstodianService_GetBalance_FullMethodName        = "/fauxstodian.v1.FauxstodianService/GetBalance"
	FauxstodianService_TransferOwnership_FullMethodName = "/fauxstodian.v1.FauxstodianService/TransferOwnership"
	FauxstodianService_CloseAccount_FullMethodName      = "/fauxstodian.v1.FauxstodianService/CloseAccount"
)

// FauxstodianServiceClient is the client API for FauxstodianService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FauxstodianServiceClient interface {
	// Create a new vault (PDA).
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// Query for total lamports in a vault.
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	// Change the owner of a vault.
	TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*TransferOwnershipResponse, error)
	// Close a vault account; withdrawing all lamports to the owner.
	CloseAccount(ctx context.Context, in *CloseAccountRequest, opts ...grpc.CallOption) (*CloseAccountResponse, error)
}

type fauxstodianServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFauxstodianServiceClient(cc grpc.ClientConnInterface) FauxstodianServiceClient {
	return &fauxstodianServiceClient{cc}
}

func (c *fauxstodianServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, FauxstodianService_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fauxstodianServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, FauxstodianService_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fauxstodianServiceClient) TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*TransferOwnershipResponse, error) {
	out := new(TransferOwnershipResponse)
	err := c.cc.Invoke(ctx, FauxstodianService_TransferOwnership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fauxstodianServiceClient) CloseAccount(ctx context.Context, in *CloseAccountRequest, opts ...grpc.CallOption) (*CloseAccountResponse, error) {
	out := new(CloseAccountResponse)
	err := c.cc.Invoke(ctx, FauxstodianService_CloseAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FauxstodianServiceServer is the server API for FauxstodianService service.
// All implementations must embed UnimplementedFauxstodianServiceServer
// for forward compatibility
type FauxstodianServiceServer interface {
	// Create a new vault (PDA).
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// Query for total lamports in a vault.
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	// Change the owner of a vault.
	TransferOwnership(context.Context, *TransferOwnershipRequest) (*TransferOwnershipResponse, error)
	// Close a vault account; withdrawing all lamports to the owner.
	CloseAccount(context.Context, *CloseAccountRequest) (*CloseAccountResponse, error)
	mustEmbedUnimplementedFauxstodianServiceServer()
}

// UnimplementedFauxstodianServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFauxstodianServiceServer struct {
}

func (UnimplementedFauxstodianServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedFauxstodianServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedFauxstodianServiceServer) TransferOwnership(context.Context, *TransferOwnershipRequest) (*TransferOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (UnimplementedFauxstodianServiceServer) CloseAccount(context.Context, *CloseAccountRequest) (*CloseAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseAccount not implemented")
}
func (UnimplementedFauxstodianServiceServer) mustEmbedUnimplementedFauxstodianServiceServer() {}

// UnsafeFauxstodianServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FauxstodianServiceServer will
// result in compilation errors.
type UnsafeFauxstodianServiceServer interface {
	mustEmbedUnimplementedFauxstodianServiceServer()
}

func RegisterFauxstodianServiceServer(s grpc.ServiceRegistrar, srv FauxstodianServiceServer) {
	s.RegisterService(&FauxstodianService_ServiceDesc, srv)
}

func _FauxstodianService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FauxstodianServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FauxstodianService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FauxstodianServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FauxstodianService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FauxstodianServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FauxstodianService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FauxstodianServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FauxstodianService_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FauxstodianServiceServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FauxstodianService_TransferOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FauxstodianServiceServer).TransferOwnership(ctx, req.(*TransferOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FauxstodianService_CloseAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FauxstodianServiceServer).CloseAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FauxstodianService_CloseAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FauxstodianServiceServer).CloseAccount(ctx, req.(*CloseAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FauxstodianService_ServiceDesc is the grpc.ServiceDesc for FauxstodianService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FauxstodianService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fauxstodian.v1.FauxstodianService",
	HandlerType: (*FauxstodianServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _FauxstodianService_CreateAccount_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _FauxstodianService_GetBalance_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _FauxstodianService_TransferOwnership_Handler,
		},
		{
			MethodName: "CloseAccount",
			Handler:    _FauxstodianService_CloseAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fauxstodian/v1/fauxstodian.proto",
}

// Copyright 2024 Figure Technologies.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: fauxstodian/fauxstodian.proto

package fauxstodian

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Fauxstodian_CreateAccount_FullMethodName     = "/fauxstodian.Fauxstodian/CreateAccount"
	Fauxstodian_GetBalance_FullMethodName        = "/fauxstodian.Fauxstodian/GetBalance"
	Fauxstodian_TransferOwnership_FullMethodName = "/fauxstodian.Fauxstodian/TransferOwnership"
	Fauxstodian_CloseAccount_FullMethodName      = "/fauxstodian.Fauxstodian/CloseAccount"
)

// FauxstodianClient is the client API for Fauxstodian service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FauxstodianClient interface {
	// Create a new vault (PDA).
	CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountRep, error)
	// Query for total lamports in a vault.
	GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceRep, error)
	// Change the owner of a vault.
	TransferOwnership(ctx context.Context, in *TransferOwnershipReq, opts ...grpc.CallOption) (*TransferOwnershipRep, error)
	// Close a vault account; withdrawing all lamports to the owner.
	CloseAccount(ctx context.Context, in *CloseAccountReq, opts ...grpc.CallOption) (*CloseAccountRep, error)
}

type fauxstodianClient struct {
	cc grpc.ClientConnInterface
}

func NewFauxstodianClient(cc grpc.ClientConnInterface) FauxstodianClient {
	return &fauxstodianClient{cc}
}

func (c *fauxstodianClient) CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountRep, error) {
	out := new(CreateAccountRep)
	err := c.cc.Invoke(ctx, Fauxstodian_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fauxstodianClient) GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceRep, error) {
	out := new(GetBalanceRep)
	err := c.cc.Invoke(ctx, Fauxstodian_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fauxstodianClient) TransferOwnership(ctx context.Context, in *TransferOwnershipReq, opts ...grpc.CallOption) (*TransferOwnershipRep, error) {
	out := new(TransferOwnershipRep)
	err := c.cc.Invoke(ctx, Fauxstodian_TransferOwnership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fauxstodianClient) CloseAccount(ctx context.Context, in *CloseAccountReq, opts ...grpc.CallOption) (*CloseAccountRep, error) {
	out := new(CloseAccountRep)
	err := c.cc.Invoke(ctx, Fauxstodian_CloseAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FauxstodianServer is the server API for Fauxstodian service.
// All implementations must embed UnimplementedFauxstodianServer
// for forward compatibility
type FauxstodianServer interface {
	// Create a new vault (PDA).
	CreateAccount(context.Context, *CreateAccountReq) (*CreateAccountRep, error)
	// Query for total lamports in a vault.
	GetBalance(context.Context, *GetBalanceReq) (*GetBalanceRep, error)
	// Change the owner of a vault.
	TransferOwnership(context.Context, *TransferOwnershipReq) (*TransferOwnershipRep, error)
	// Close a vault account; withdrawing all lamports to the owner.
	CloseAccount(context.Context, *CloseAccountReq) (*CloseAccountRep, error)
	mustEmbedUnimplementedFauxstodianServer()
}

// UnimplementedFauxstodianServer must be embedded to have forward compatible implementations.
type UnimplementedFauxstodianServer struct {
}

func (UnimplementedFauxstodianServer) CreateAccount(context.Context, *CreateAccountReq) (*CreateAccountRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedFauxstodianServer) GetBalance(context.Context, *GetBalanceReq) (*GetBalanceRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedFauxstodianServer) TransferOwnership(context.Context, *TransferOwnershipReq) (*TransferOwnershipRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (UnimplementedFauxstodianServer) CloseAccount(context.Context, *CloseAccountReq) (*CloseAccountRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseAccount not implemented")
}
func (UnimplementedFauxstodianServer) mustEmbedUnimplementedFauxstodianServer() {}

// UnsafeFauxstodianServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FauxstodianServer will
// result in compilation errors.
type UnsafeFauxstodianServer interface {
	mustEmbedUnimplementedFauxstodianServer()
}

func RegisterFauxstodianServer(s grpc.ServiceRegistrar, srv FauxstodianServer) {
	s.RegisterService(&Fauxstodian_ServiceDesc, srv)
}

func _Fauxstodian_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FauxstodianServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fauxstodian_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FauxstodianServer).CreateAccount(ctx, req.(*CreateAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fauxstodian_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FauxstodianServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fauxstodian_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FauxstodianServer).GetBalance(ctx, req.(*GetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fauxstodian_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOwnershipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FauxstodianServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fauxstodian_TransferOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FauxstodianServer).TransferOwnership(ctx, req.(*TransferOwnershipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fauxstodian_CloseAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FauxstodianServer).CloseAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fauxstodian_CloseAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FauxstodianServer).CloseAccount(ctx, req.(*CloseAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Fauxstodian_ServiceDesc is the grpc.ServiceDesc for Fauxstodian service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fauxstodian_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fauxstodian.Fauxstodian",
	HandlerType: (*FauxstodianServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _Fauxstodian_CreateAccount_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Fauxstodian_GetBalance_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _Fauxstodian_TransferOwnership_Handler,
		},
		{
			MethodName: "CloseAccount",
			Handler:    _Fauxstodian_CloseAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fauxstodian/fauxstodian.proto",
}
